// Code generated by go-bindata.
// sources:
// assets/index.css
// assets/index.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xca\x41\x0a\x82\x21\x10\xc5\xf1\xab\xcc\xa6\xa5\x20\x81\x1b\xe7\x34\x43\x4d\x36\xa0\xa3\xd8\xa3\x84\xe8\xee\x61\x7d\xcb\xf7\x7b\xff\x26\xe6\xef\xd1\x1f\x06\xeb\x9e\xa7\x56\x81\x3d\x95\xe9\x65\x57\xdc\x33\xa5\x18\xc7\x62\xaa\x7a\xc3\x1e\x27\xa6\x26\xb3\x98\x87\xbf\x84\x73\xfa\xfd\x07\xa2\x8f\x5d\x6d\x81\x2e\x04\xa9\x56\x3c\xd3\x45\x1d\x3a\xf9\xf3\x0d\x00\x00\xff\xff\x6e\xa3\x57\x93\x6c\x00\x00\x00"

func assetsIndexCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexCss,
		"assets/index.css",
	)
}

func assetsIndexCss() (*asset, error) {
	bytes, err := assetsIndexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.css", size: 108, mode: os.FileMode(420), modTime: time.Unix(1530347067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdf\x6f\xdb\x36\x10\x7e\x96\xff\x8a\x2b\x07\xa4\x12\xe2\x28\xdb\xb0\xa7\x04\xda\x90\x66\xc6\x12\xa0\x59\x8c\xd6\x01\x0a\x14\x7d\xa0\xc5\x93\x45\x47\x26\x39\xf2\x54\xdb\x6b\xfd\xbf\x0f\xd4\x6f\xc5\xe9\x0f\x0c\xf5\x83\x4d\x1d\xef\x3e\xf2\xfb\xf4\xdd\x39\xf8\xc8\x2d\xf0\x35\xdf\x41\x02\x9f\x26\x41\x10\x48\x25\xe9\x02\xb2\x52\xa5\x24\xb5\x82\x30\xaa\xc3\x55\xde\x6e\x53\xe4\x44\xe6\xb2\x0a\x90\xdd\x37\x5b\x41\x13\x87\x04\x14\x6e\xe1\x2a\x25\xf9\x11\xdf\xdd\x2f\xd7\x98\x52\xc8\xee\xdc\x6e\x53\xfc\x1a\xbf\xbb\x7b\x7d\xb3\x58\xcc\x59\x54\x57\x1f\x20\xe5\x94\xe6\x10\x62\x7b\xc0\x10\xf0\x1b\x88\x32\xb5\xda\xe9\x8c\x9e\x82\xf6\xa8\xb3\xe8\x19\xa8\x8c\x17\x0e\xdb\xcc\x49\xff\x2d\x33\x08\x5f\xb4\x69\x27\x27\x40\x7b\x83\x3a\x03\x0f\x4e\x64\xde\xe0\x3f\x25\x3a\x82\x17\x09\xbc\x2c\x95\xc0\x4c\x2a\x14\x2f\x23\x18\x5f\x71\x9c\x1c\x36\x17\xb2\x48\xa5\x55\x23\xdd\x0e\xd3\x89\xff\x71\x68\x25\x2f\xe4\xbf\xd8\x6b\x1d\xea\xe5\xba\xb9\x36\x80\x97\xdb\x91\x85\x04\xde\x7f\xb8\xac\x43\x99\xb6\x10\xfa\xb8\x01\xa9\xc0\x27\xd7\x71\x00\x4f\x40\x2f\xd7\x71\xce\xdd\xfd\x56\xcd\xad\x36\x68\x69\x1f\x9a\xa8\x83\xf3\x1f\x47\x36\x36\xa5\xcb\x43\x54\xa9\x16\xf8\xf0\xe6\xf6\x5a\x6f\x8c\x56\xa8\x28\x34\x11\x9c\x02\x4b\x18\x9c\xc2\x33\xbb\x7a\xb9\x7e\x6f\x3e\x44\xd1\x65\x0b\x76\xa8\x17\x0d\x3d\x0f\xbc\xd6\x52\x85\xec\xa4\x79\x13\x1d\x49\x25\x06\xfc\x36\x48\xb9\x16\x53\x28\x6d\x31\x05\xc1\x89\x4f\x21\xe5\x45\xb1\xe4\xe9\xe3\xd0\x65\x1c\x92\xca\x91\xb1\xb7\xa2\x57\xb2\xda\xa9\x8b\x21\x81\x7a\x11\x93\x7e\x30\x06\xed\x35\x77\xd8\xaa\xed\x65\x68\xd3\x12\x60\xf3\xfb\xb7\x0b\x06\x9f\x3f\xc3\x30\xf6\x70\x14\x7a\x98\xff\x79\xb5\x98\xb1\xce\x30\x3c\x76\x48\xcd\x7b\xbc\x41\x2e\xd0\x86\xec\x5a\x2b\x42\x45\x67\xde\x19\x6c\x0a\x8c\x1b\x53\xc8\x94\x7b\x56\xe7\xbb\xb3\xed\x76\x7b\x96\x69\xbb\x39\x2b\x6d\x51\xab\x27\x7a\x9b\x63\xe1\xb0\x85\x2e\x6d\x01\xa7\x09\xb0\x3f\xd8\x69\x45\xb0\x33\x41\xe8\xd5\x68\x4b\x6a\xbe\x3c\xd6\x06\x47\x9a\x35\xfb\xfe\x7e\x4a\x0c\x2b\x3a\xf2\x4f\xd5\xf4\x20\xca\x22\x17\x7b\x47\x9c\x30\xcd\xb9\x5a\xa1\x6f\x84\xa3\xee\xae\xeb\x79\x5c\x25\xbf\xf5\xc9\xf0\x7b\x02\xbf\xf5\xdb\x23\x7c\xaf\x5b\xd7\x0a\x5e\xce\xe1\x06\x63\x83\xaa\x20\xd5\xca\xe9\x02\xe3\x42\xaf\x2a\x78\x67\xb4\x72\xb8\xc0\x1d\xb5\x3d\xdb\xb5\x49\xf7\xdc\x28\xe0\x0d\xb4\x95\x55\x3b\xb7\xf8\x71\x9a\x73\x7b\x45\xe1\xcf\xd1\xe8\x0c\xee\x10\xd8\x4f\xec\xa2\x8b\x04\xe7\xe7\x52\x39\xb4\x04\xed\x89\xb0\xdc\x83\x14\x7d\x82\x37\x9a\x70\x04\x09\x08\x9d\x96\x1b\x54\x14\xaf\x90\x66\x05\xfa\xe5\xab\xfd\xad\xe8\xcf\x74\xe5\xd2\x91\x95\x6a\x15\xfe\xd2\x1b\x36\x2e\x50\xad\x28\x8f\x06\x2c\x02\xe1\x28\x96\x4a\xa1\xbd\x59\xdc\xbd\xf6\x26\x1e\xf1\x1d\x24\x2e\x2d\xf2\xc7\xcb\xc9\x13\x02\xf1\x37\x09\xa4\x05\x77\x4e\xf1\x0d\x1e\xf1\x70\xcf\x13\x71\xaf\xf6\xd7\xbe\xe6\x6f\xbe\xc1\xff\x47\xc8\xc5\x99\xb6\x33\x9e\xe6\x61\xd7\xc6\xc2\xd1\x50\xfd\x00\xe0\xbb\x89\x1f\xa2\xaf\xa8\x20\x30\xe3\x65\x41\x23\x11\x0c\x77\xae\x97\x80\x74\xef\xb4\xf6\x3a\x7d\x76\xbb\xf5\x65\x9f\xb5\x47\x76\x3e\x6b\x16\x93\xd1\xf3\xe0\xaf\xe1\xbb\x86\x75\x70\x34\xab\x83\x4c\xdb\xe3\x49\x5d\xf7\xd0\xd7\xe6\xb4\x3f\xea\xc7\x0c\xe9\x96\xc5\x97\x27\xf4\xa4\xea\xb3\x49\x10\x74\xc3\x20\xcd\x31\x7d\xbc\x9d\x87\xd2\x4c\xa1\x7f\xc7\xc3\x06\x96\xa6\x2e\x1e\xc6\x7c\x66\x15\x6c\x26\x9a\x12\x21\xfb\x6b\xb6\xf0\x53\xf2\x9c\x4d\xe1\x13\x93\x86\x5d\x80\x34\x87\x1a\xd4\xa7\x1e\xfe\x0b\x00\x00\xff\xff\x3f\x4a\xb3\x52\x75\x08\x00\x00"

func assetsIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexJs,
		"assets/index.js",
	)
}

func assetsIndexJs() (*asset, error) {
	bytes, err := assetsIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.js", size: 2165, mode: os.FileMode(420), modTime: time.Unix(1530346261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.css": assetsIndexCss,
	"assets/index.js": assetsIndexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.css": &bintree{assetsIndexCss, map[string]*bintree{}},
		"index.js": &bintree{assetsIndexJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

